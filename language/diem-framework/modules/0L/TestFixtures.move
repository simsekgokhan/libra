/////////////////////////////////////////////////////////////////////////
// 0L Module
// TestFixtures
// Collection of vdf proofs for testing.
/////////////////////////////////////////////////////////////////////////

address 0x1 {
module TestFixtures{
  use 0x1::Testnet;

    // Here, I experiment with persistence for now
    // Committing some code that worked successfully
    // struct ProofFixture {
    //   challenge: vector<u8>,
    //   solution: vector<u8>
    // }

    // public fun alice(){
    //   // In the actual module, must assert that this is the sender is the association
    //   move_to_sender<State>(State{ hist: Vector::empty() });
    // }

    public fun easy_chal(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"aa"
    }

    public fun easy_sol(): vector<u8>  {
      assert(Testnet::is_testnet(), 130102014010);
      x"001eef1120c0b13b46adae770d866308a5db6fdc1f408c6b8b6a7376e9146dc94586bdf1f84d276d5f65d1b1a7cec888706b680b5e19b248871915bb4319bbe13e7a2e222d28ef9e5e95d3709b46d88424c52140e1d48c1f123f2a1341448b9239e40509a604b1c54cc6c2750ae1255287308d7b2dd5353bae649d4b1bcb65154cffe2e189ec6960d5fa88eef4aa4f1c1939ce8b4808c379562a45ffcda8c502b9558c0999a595dddc02601e837634081977be9195345fae0e858b2cf402e03844ccda24977966ca41706e84c3bf4a841c3845c7bb519547b735cb5644fb0f8a78384827a098b3c80432a4db1135e3df70ade040444d67936b949bd17b68f64fde81000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
    }

    public fun hard_chal(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"a3a2855bbea4756f6f1926c0b06edbbb252f0b551c80cd9e951d82c6f70792ae000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006578706572696d656e74616c404b4ce20535542544c452053484144494e4720414e442054484520414253454e4345204f46204c49474854204c49455320544845204e55414e4345204f462049514c5553494f4e"
    }

    public fun hard_sol(): vector<u8>  {
      assert(Testnet::is_testnet(), 130102014010);
      x"0045273a066edaf0e875652bfb2987f3a4a97950143a217d6431877815445149d5dfb758fecc400cb0e8a2602efa30e25aa9d23183abb05a4b923a348d8b616fa2943dad900feaa25e6a0a2d37e9844e1e6a2df6d67e98774a8a4f2195d9a02f6cf45ae179ab7d6f82c16d6be3a26840768c4b27042439108fd3819f4d114a0676ffc6043ee5fbfee86590d01ccca3b56490eb936ade9fa0041176b0192e21c90b9d0b84c0dac37b2752388f99036325570ab2e81be07ef87d3859f1706245de5841f13296d5d30e101eff55cf44514e0b96ea39cef6c7c35cd5b2eb9f2f4127d3298b8182f3248a7292e5b418135c585636816553a7824bd2ac42e448324fb9fd2f0057f8c33512d731fd12280a92a673e6174092cebc036ea06bbcf6b112f91f53aad2941fe4ca5635a5c0cb40a3b7894b79eb81b4f12490fc6f39317cb9e57fab28726b7dcb90268de2bbab762df2d549137d59742f8eab879d5cc2a90dd90b36d03d7841204425e53e2c398e5ca834f182d2db1fd73af48d2f05d1e231a9d951daffd75d121dd32d4989ad90366ca4c02bee7ec4a6a06813fd1e9c6b0249769d2c80f1cdc7025c76dd06c95c7065d481fbd1f4941511a408a0dcedd398adfa374d83cd9fab785ab39128552c7551365dae6dee2686b5d993df405e155ff85b743e40ce093ef631720299ae500132b72e87109619ccac7db5b54c0ac90c063581909b"
    }

    //FROM: diem/fixtures/block_0.json.stage.alice
    public fun alice_0_easy_chal(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"87515d94a244235a1433d7117bc0cb154c613c2f4b1e67ca8d98a542ee3f59f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304c20746573746ef74657374732072616765206163726f737320746865206e6174696f6e"
    }

    public fun alice_0_easy_sol(): vector<u8>  {
      assert(Testnet::is_testnet(), 130102014010);
      x"002c4dc1276a8a58ea88fc9974c847f14866420cbc62e5712baf1ae26b6c38a393c4acba3f72d8653e4b2566c84369601bdd1de5249233f60391913b59f0b7f797f66897de17fb44a6024570d2f60e6c5c08e3156d559fbd901fad0f1343e0109a9083e661e5d7f8c1cc62e815afeee31d04af8b8f31c39a5f4636af2b468bf59a0010f48d79e7475be62e7007d71b7355944f8164e761cd9aca671a4066114e1382fbe98834fe32cf494d01f31d1b98e3ef6bffa543928810535a063c7bbf491c472263a44d9269b1cbcb0aa351f8bd894e278b5d5667cc3f26a35b9f8fd985e4424bedbb3b77bdcc678ccbb9ed92c1730dcdd3a89c1a8766cbefa75d6eeb7e5921000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
    }

        //FROM: diem/fixtures/block_1.json.stage.alice

    public fun alice_1_easy_chal(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"3190cef88aa2fb86fbfa062f62be33d08d1493e982597d7be286ab5b6d01e4b0"
    }

    public fun alice_1_easy_sol(): vector<u8>  {
      assert(Testnet::is_testnet(), 130102014010);
      x"006e33a9542693512b59aa04081bb2a87f0bf07328c62cfc5dafdebf57c35ddd6a75664ddfa7ebfe0b9cbc6c5d19f03f77841cef9923d32bea8a4a642adfd94a31d2b523cb32e8adc27ee63ec2d793f3c224c0be2c4258dcb7ba5b74ee78d21f1d045165c9bd7e41a42085ea4cdb95fb8ffd437448ad93610d4d445f339807fffbffb3a77ab38d67e301889a7d83a789895fa5a12113213b4674ec4dbd6037bcd7c9e8c5edb6f7bf738e19845aa25c0cd3cf258f978c406195c2a8d7edf8785d1697653d213add8cb632680f167dbb1a6a4716a2b174a91c5319c9b5224504975e94e7b751b55bad30b27678fa9c46d94d02f5bf757d27305b1283c542ca
    }

  // // TODO: Replace with fixtures in diem/fixtures.
    public fun alice_0_hard_chal(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"87515d94a244235a1433d7117bc0cb154c613c2f4b1e67ca8d98a542ee3f59f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304c20746573746e6574404b4cf74657374732072616765206163726f737320746865206e6174696f6e"
    }

    public fun alice_0_hard_sol(): vector<u8>  {
      assert(Testnet::is_testnet(), 130102014010);
      x"001725678f78425dac39e394fc07698dd8fc891dfba0822cecc5d21434dacde903f508c1e12844eb4b97a598653cc6d03524335edf51b43f090199288488b537fd977cc5f53069f609a2f758f121e887f28f0fc1150aa5649255f8b7caea9edf6228640358d1a4fe43ddb6ad6ce1c3a6a28166e2f0b7e7310e80bfbb1db85e096000065a89b7f44ebc495d70db6034fd529a80e0b5bb74ace62cffb89f4e16e54f93e4a0063ca3651dd8486b466607973a51aacb0c66213e64e0b7bf291c64d81ed4a517a0abe58da4ae46f6191c808d9ba7c636cee404ed02248794db3fab6e5e4ab517f6f3fa12f39fb88fb5a143b5d9c16a31e3c3e173deb11494f792b52a67a70034a065c665b1ef05921a6a8ac4946365d61b2b4d5b86a607ba73659863d774c3fc7c2372f5b6c8b5ae068d4e20aac5e42b501bf441569d377f70e8f87db8a6f9b1eadb813880dbeb89872121849df312383f4d8007747ae76e66e5a13d9457af173ebb0c5eb9c39ee1ac5cef94aa75e1d5286349c88051c36507960de1f37377ffddc80a66578b437ac2a6d04fc7a595075b978bd844919d03ffe9db5b6440b753273c498aa2a139de42188d278d1ce1e3ddfdd99a97a64907e1cdf30d1c55dfc7262cd3175eb1f268ee2a91576fcd6bd644031413f55e42c510d08a81e747de36c0a6c9019d219571ea6851f43a551d6012a5317cc52992a72c270c1570419665"
    }
    public fun alice_1_hard_chal(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"df6046be26c9a64ececa098a5ecbf724d91619ce64a4899087ac2098d394df59"
    }

    public fun alice_1_hard_sol(): vector<u8>  {
      assert(Testnet::is_testnet(), 130102014010);
      x"0061aec41fb46a2db9fd56d0112e432a55a5857df2626a80188b11228aab9a5e8ef2ee2c0838b1d623100fbf2e9516528733e8b376ec54c82a6f784ba146ea0fa004ef2d03d755ad5e41b5d09c0d073a1a507d4569505b4ad1d0ceb2bc1132e2f8a94f4ae5faa9e38f29703baf74d597e9e9f6a200a24add3d9109fe9b2aee72b6000b762eea2ec3fb9551366a0bd93bb2194f0b94c3020ed1172a7a99c3a3f7fa74f403ce9262e6bf5a6c128b52f577c2d99b38271cd23f26332be0819cad4ac5676074e203f448a1c94e443e3c83cb636c760a94a1b8cd0f4253970f9a571e62670a28b0adba42e1edfb9490ee5a5a83bcd6af50c6e35743d3b0c8bcacaf4282370014d13eb080ce34a49b2d49d4477672db2cd527e04cd0c8a6d9094f0d5e4cfe8edc21228ca12da68bbd53fca5b23fc275c82ba90197dc53f3eaf34393905ebf25a5f7e429d3c9dcdfa22c3098f2761c161d65c0eec4f57dd1b1354ccc9ae0b54f2741ac4a93dc1e80afa940dc515f25e66fc93614f51ac3bbfc64c2701161ce86fff832feb81d2e177b24315381a45c18d16ccac6d554a8871bcf859139d2ba6985ca57703b301ecce28d7922df352bdd5103295472d38840c3cf5e30d760083b39ae8cee53dfc9c5034443849f10db6425332603966fecfef38382ad7fb5d4618eb96a826fd2deeec0977c5bdeb270b09fd84eb974f87e14df1e7654217d69737f"
    }

    public fun eve_0_easy_chal(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"2bffcbd0e9016013cb8ca78459f69d2b3dc18d1cf61faac6ac70e3a63f062e4b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304c20746573746ef74657374732072616765206163726f737320746865206e6174696f6e"
    }

    public fun eve_0_easy_sol(): vector<u8>  {
      assert(Testnet::is_testnet(), 130102014010);
      x"00168e77068c3e4ebf4908cdad141265a65f390f0e82ac2510f9f92116d32a60f049f0d6e098fc3bf3cd363c34cbed43cf1ea9927db2f02934be9a1a7aba3a2c83f13e19336264b4688b7c329edc45ef510ec8b2c99a1ba2949a0577fbb8815da2e5c0ecc6852a9c42a10e001324547fda3858fae568b6405ee59bd2da7443295c0006c8d4ca51804171d1809f3c04546053b33e1f3b08624f33a68f76711bc27db33d1619f05308de1ac4cb349b8156fc073e6ce4730841363a350c5f2e4ac7a4a931916d5c508bcac40e2bfcc7b0ce475b0a5c492b2e752ecf2284b8bacff76b4ad2004ac8b8423bd11a016faa90ef1817c215a3426c9f80100f511177d4f4e2bd
    }

    public fun eve_1_easy_chal(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"d377c3acb90f60a5f477c29a3ed184f85844384bd5ee68111b29006611ee7fc9"
    }

    public fun eve_1_easy_sol(): vector<u8> {
      assert(Testnet::is_testnet(), 130102014010);
      x"004bca734b64a35af6fb3dc41fe6bcbc710610701e372ebf34204b229698afa0b6313a4fa77fa558d0fb2d382ff6f811673bd52b016a5c6ecb559d78d5b59d7ae476edf94fc97d7ab41b39816cd7e12672521f0ca74674cf192ec36f15844bd66d67814afefd1b4c0410339b6626a3e0b6554c98c77951ca7a7eeded19d42ad6ceffc0aa319d94ce1995b6db2ae91cd11a09502ea7b6708c0453be39f3228489078347fe5ff10c42b707c44afd4bf126666cb7fbebc89716d8ae7f76858baca524769bf78a544d2c150f69a5ec41802bd39625e87444dadfc5e1a32024a39ed9f272f5705c2de96e2f3ea3229932c95d6478488b0ab2489f2b26d76154cc859c7da
    }
  }
}
