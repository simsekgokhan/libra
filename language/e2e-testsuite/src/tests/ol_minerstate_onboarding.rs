// Copyright (c) 0lsf
// SPDX-License-Identifier: Apache-2.0

use diem_transaction_builder::stdlib as transaction_builder;
use diem_types::{transaction::TransactionStatus, vm_status::KeptVMStatus, PeerId};
use hex;
use language_e2e_tests::{account::AccountData, executor::FakeExecutor};

#[test]
#[ignore]
fn miner_onboarding() {
    let mut executor = FakeExecutor::from_genesis_file();

    // test data for the VDF proof, using easy/test difficulty
    // This assumes that it is a FIRST Proof, (genesis proof)
    // and it doesn't neet to match a previously sent proof.
    // effectively only a genesis ceremony will use this transaction.
    // Other miner onboarding will be done with the onboarding transaction.

    // This test uses Alice's block_1 proof (../fixtures/block_1.json.stage.alice), assuming she has participated in a genesis ceremony.
    let preimage = hex::decode(
        "2bffcbd0e9016013cb8ca78459f69d2b3dc18d1cf61faac6ac70e3a63f062e4b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304c20746573746ef74657374732072616765206163726f737320746865206e6174696f6e"
    ).unwrap();
    let proof = hex::decode(
        "00168e77068c3e4ebf4908cdad141265a65f390f0e82ac2510f9f92116d32a60f049f0d6e098fc3bf3cd363c34cbed43cf1ea9927db2f02934be9a1a7aba3a2c83f13e19336264b4688b7c329edc45ef510ec8b2c99a1ba2949a0577fbb8815da2e5c0ecc6852a9c42a10e001324547fda3858fae568b6405ee59bd2da7443295c0006c8d4ca51804171d1809f3c04546053b33e1f3b08624f33a68f76711bc27db33d1619f05308de1ac4cb349b8156fc073e6ce4730841363a350c5f2e4ac7a4a931916d5c508bcac40e2bfcc7b0ce475b0a5c492b2e752ecf2284b8bacff76b4ad2004ac8b8423bd11a016faa90ef1817c215a3426c9f80100f511177d4f4e2bd
    ).unwrap();

    // assert_eq!(proof_computed, proof.to_vec());

    //let sender = Account::new();
    let sequence = 1;
    let sender = AccountData::new(1_000_000, sequence);
    let receiver = AccountData::new(100_000, 10);
    executor.add_account_data(&sender);
    executor.add_account_data(&receiver);

    let payload = transaction_builder::encode_minerstate_helper_script_function();
    let txn_help = sender.account()
        .transaction()
        .payload(payload)
        .sequence_number(sequence)
        .sign();

    let output = executor.execute_and_apply(txn_help);
    assert_eq!(
        output.status(),
        &TransactionStatus::Keep(KeptVMStatus::Executed)
    );
    println!("Helper executed successfully");

    // let consensus_pubkey = hex::decode("8108aedfacf5cf1d73c67b6936397ba5fa72817f1b5aab94658238ddcdc08010").unwrap();
    // let validator_network_address = "192.168.0.1".as_bytes().to_vec();
    // let full_node_network_address = "192.168.0.1".as_bytes().to_vec();
    // let human_name = "1ee7".as_bytes().to_vec();

    let payload = transaction_builder::encode_create_acc_val_script_function(
        preimage,
        proof,
        "3DC18D1CF61FAAC6AC70E3A63F062E4B".as_bytes().to_vec(),
        PeerId::from_hex_literal("0x0E04E58B354EF058D08DD493F2352454").unwrap(),
        "ecc59a4a0963f65b5eceb0fffa01ea99".as_bytes().to_vec(),
        "cac7909e7941176e76c55ddcfae6a9c13e2be071593c82cac685e7c82d7ffe9d".as_bytes().to_vec(),
        "134.122.115.12".as_bytes().to_vec(),
        "134.122.115.12".as_bytes().to_vec(),
        "3DC18D1CF61FAAC6AC70E3A63F062E4B-oper".as_bytes().to_vec()
    );

    let txn = sender.account()
        .transaction()
        .payload(payload)
        .sequence_number(sequence+1)
        .sign();
    
    let output = executor.execute_transaction(txn);
    assert_eq!(
        output.status(),
        &TransactionStatus::Keep(KeptVMStatus::Executed)
    );
}